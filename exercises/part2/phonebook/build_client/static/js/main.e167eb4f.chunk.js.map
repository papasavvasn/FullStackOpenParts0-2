{"version":3,"sources":["EntryAdder.tsx","Filter.tsx","services/persons.ts","Persons.tsx","Notification.tsx","App.tsx","serviceWorker.js","index.js"],"names":["EntryAdder","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","filter","handleFilterChange","baseUrl","name","number","id","axios","post","delete","get","put","Persons","persons","setPersons","displayNotification","person","toLowerCase","includes","map","key","onClick","window","confirm","find","personsService","then","status","catch","message","clickHandler","Notification","className","App","useState","setNewName","setNewNumber","setFilter","notification","setNotification","notificationType","setNotificationType","useEffect","personService","response","data","setTimeout","EntryAdderCallbacks","event","preventDefault","Date","getTime","length","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.e167eb4f.chunk.js","sourcesContent":["import React, { FormEvent } from 'react'\n\ntype EntryAdderProps = {\n    addName: (event: FormEvent<HTMLFormElement>) => void\n    newName: string;\n    handleNameChange: (event: { target: HTMLInputElement }) => void\n    newNumber: string;\n    handleNumberChange: (event: { target: HTMLInputElement }) => void\n}\n\nexport const EntryAdder = ({ addName, newName, handleNameChange, newNumber, handleNumberChange }: EntryAdderProps) => <>\n    <h2>Add a new</h2>\n    <form onSubmit={addName}>\n        <div>\n            name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n            number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form></>","import React from 'react'\n\ntype FilterProps = { filter: string, handleFilterChange: (event: { target: HTMLInputElement }) => void }\n\nexport const Filter = ({ filter, handleFilterChange }: FilterProps) => <div>filter shown with <input value={filter} onChange={handleFilterChange} /></div>\n","import axios from 'axios'\nimport { Person } from '../Persons'\nconst baseUrl = '/api/persons'\n\nconst getPersons = () => axios.get(baseUrl)\n\nconst addPerson = ({ name, number, id }: Person) => axios.post(baseUrl, { name, number, id })\n\nconst deletePerson = (id: string) => axios.delete(`${baseUrl}/${id}`)\n\nconst updatePerson = ({ name, number, id }: Person) => axios.put(`${baseUrl}/${id}`, { number, name, id })\n\nexport default {\n    addPerson,\n    deletePerson,\n    getPersons,\n    updatePerson\n}","import React from 'react'\nimport personsService from \"./services/persons\"\n\nexport type Person = {\n    name: string,\n    number: string,\n    id: string\n}\n\ntype PersonProps = {\n    persons: Person[],\n    filter: string,\n    setPersons: (persons: Person[]) => void,\n    displayNotification: ({ message, type }: { message: string, type: \"success\" | \"error\" }) => void;\n}\n\nexport const Persons = ({ persons, filter, setPersons, displayNotification }: PersonProps) => {\n\n    const clickHandler = ({ id, name }: Person) => {\n        if (window.confirm(`Delete ${persons.find(person => person.id === id)?.name}`)) {\n            personsService.deletePerson(id).then(({ status }) => {\n                if (status === 200) {\n                    setPersons(persons.filter(person => person.id !== id))\n                }\n            }).catch(() => displayNotification({ message: `Information of ${name} has already been removed from the server`, type: \"error\" }))\n\n        }\n    }\n\n    return <>\n        {persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n            .map(person =>\n                <p key={person.name}>{person.name} {person.number} <button onClick={() => clickHandler(person)}>Delete</button> </p>\n            )}\n    </>\n}\n","import React from 'react'\nimport \"./Notification.css\"\n\nexport const Notification = ({ message, type }: { message: string | null, type: \"success\" | \"error\" }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={type}>\n            {message}\n        </div>\n    )\n}","import React, { useState, useEffect, FormEvent } from 'react'\nimport { EntryAdder } from \"./EntryAdder\"\nimport { Filter } from './Filter'\nimport { Persons, Person } from './Persons'\nimport personService from './services/persons'\nimport { Notification } from './Notification'\n\n\nconst App = () => {\n\n  const [persons, setPersons] = useState<Person[]>([])\n  const [newName, setNewName] = useState<string>('')\n  const [newNumber, setNewNumber] = useState<string>('')\n  const [filter, setFilter] = useState<string>('')\n  const [notification, setNotification] = useState<string | null>(null)\n  const [notificationType, setNotificationType] = useState<\"error\" | \"success\">(\"success\")\n\n  useEffect(() => {\n    personService.getPersons()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const displayNotification = ({ message, type }: { message: string, type: \"success\" | \"error\" }) => {\n\n    setNotificationType(type)\n    setNotification(\n      `${message}`\n    )\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n\n\n  }\n\n  const EntryAdderCallbacks = {\n    addName: (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault()\n      const names = persons.map(person => person.name)\n      if (!names.includes(newName)) {\n        personService.addPerson({ name: newName, number: newNumber, id: new Date().getTime() + persons.length + \"\" })\n          .then(({ data }) => {\n            setPersons([...persons, { name: data.name, number: data.number, id: data.id }])\n            displayNotification({ message: `Added ${data.name}`, type: \"success\" })\n          }\n          )\n      } else {\n        if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one`)) {\n          personService.updatePerson({ number: newNumber, id: persons.find(person => person.name === newName)!.id, name: newName })\n            .then(({ status, data }) => {\n              if (status === 200) {\n                setPersons([...persons.filter(person => person.id !== data.id), data])\n                displayNotification({ message: `Updated ${data.name}`, type: \"success\" })\n              }\n            }).catch(() => displayNotification({ message: `Information of ${newName} has already been removed from the server`, type: \"error\" }))\n        }\n      }\n      setNewName(\"\")\n      setNewNumber(\"\")\n    },\n    handleNameChange: (event: { target: HTMLInputElement }) => {\n      setNewName(event.target.value)\n    },\n    handleNumberChange: (event: { target: HTMLInputElement }) => {\n      setNewNumber(event.target.value)\n    }\n  }\n\n  function handleFilterChange(event: { target: HTMLInputElement }) {\n    setFilter(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      <Notification message={notification} type={notificationType} />\n      <EntryAdder newName={newName} newNumber={newNumber} {...EntryAdderCallbacks} />\n      <Persons filter={filter} persons={persons} setPersons={setPersons} displayNotification={displayNotification} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change lala\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}